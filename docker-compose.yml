version: '3.4'

services:

  maildev:
    image: maildev/maildev

  # rabbitmq:
  #   image: rabbitmq:3-management-alpine

  # zookeeper:
  #   image: zookeeper
  #   ports:
  #     - 2181:2181
  #   environment:
  #     ZOO_MY_ID: 1
  #     ZOO_PORT: 2181
  #     ZOOKEEPER_SERVERS: server.1=zookeeper:2888:3888
  #     ZOOKEEPER_SASL_ENABLED: "false"
  #   volumes:
  #     - ./local/kafka/zoo1/data:/data
  #     - ./local/kafka/zoo1/datalog:/datalog

  # kafka:
  #   image: confluentinc/cp-kafka:5.1.0
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_LISTENERS: SASL_PLAINTEXT://:9092
  #     KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
  #     KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://localhost:9092
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     ZOOKEEPER_SASL_ENABLED: "false"
  #     KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
  #     KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
  #     KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
  #     KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - ./infrastructure/kafka/kafka_server_jaas.conf:/etc/kafka/kafka_server_jaas.conf
  #     - ./local/kafka/var/run/docker.sock:/var/run/docker.sock
  #     - ./local/kafka/data:/var/lib/kafka/data
  #   links:
  #     - zookeeper
  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "orders:1:1"
    volumes: 
      - ./local:/var/lib/kafka/data
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  redis:
    image: redis:alpine

  seq:
    image: datalust/seq:latest

  # Use the Azure SQL Edge version so we can also run on Apple Sillicon (thanks @ChristianWeyer)
  sqldata:
    image: mcr.microsoft.com/azure-sql-edge

  zipkin:
    image: openzipkin/zipkin-slim

  basket-api:
    image: ${REGISTRY:-eshopdapr}/basket.api:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Basket/Basket.API/Dockerfile
    depends_on:
      - identity-api
      - redis

  basket-api-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:basket-api"
    depends_on:
      - basket-api

  blazor-client:
    image: ${REGISTRY:-eshopdapr}/blazor.client:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Web/BlazorClient.Host/Dockerfile

  catalog-api:
    image: ${REGISTRY:-eshopdapr}/catalog.api:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Catalog/Catalog.API/Dockerfile
    depends_on:
      - sqldata

  catalog-api-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:catalog-api"
    depends_on:
      - catalog-api

  identity-api:
    image: ${REGISTRY:-eshopdapr}/identity.api:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Identity/Identity.API/Dockerfile
    depends_on:
      - sqldata

  identity-api-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:identity-api"
    depends_on:
      - identity-api

  ordering-api:
    image: ${REGISTRY:-eshopdapr}/ordering.api:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Ordering/Ordering.API/Dockerfile
    depends_on:
      - sqldata

  ordering-api-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:ordering-api"
    depends_on:
      - ordering-api

  payment-api:
    image: ${REGISTRY:-eshopdapr}/payment.api:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Payment/Payment.API/Dockerfile

  payment-api-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:payment-api"
    depends_on:
      - payment-api

  webshoppingagg:
    image: ${REGISTRY:-eshopdapr}/webshoppingagg:${TAG:-latest}
    build:
      context: .
      dockerfile: src/ApiGateways/Aggregators/Web.Shopping.HttpAggregator/Dockerfile
    depends_on:
      - basket-api
      - catalog-api
      - identity-api
      - ordering-api
      - sqldata

  webshoppingagg-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:webshoppingagg"
    depends_on:
      - webshoppingagg

  webshoppingapigw:
    image: ${REGISTRY:-eshopdapr}/webshoppingapigw:${TAG:-latest}
    build:
      context: .
      dockerfile: src/ApiGateways/Envoy/Dockerfile

  webshoppingapigw-dapr:
    image: "daprio/daprd:1.8.4"
    network_mode: "service:webshoppingapigw"
    depends_on:
      - webshoppingapigw

  webstatus:
    image: ${REGISTRY:-eshopdapr}/webstatus:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Web/WebStatus/Dockerfile

  dapr-placement:
    image: "daprio/dapr:1.8.4"